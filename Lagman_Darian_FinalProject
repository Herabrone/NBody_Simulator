'''
Darian Lagman
7917268
ASTR 3180 Final Project

This project will simulate the movements of n bodies with realtion to each other
utilizaing the Barnes-Hut algorithm to calculate the forces applied on each body.

'''
import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import click

class Body:
    '''
    Represents a celestial body in the simulation.

    Attributes:
    - mass (float): The mass of the body.
    - position (numpy array): The position of the body in 3D space (x, y, z).
    - velocity (numpy array): The velocity vector of the body in 3D space (vx, vy, vz).
    - acceleration (numpy array): The acceleration vector of the body in 3D space, initialized to zero.
    
    Parameters:
    - mass (float): Initial mass of the body.
    - position (numpy array): Initial position as a 3D vector.
    - velocity (numpy array): Initial velocity as a 3D vector.

    '''

    def __init__(self, mass, position, velocity):
        self.mass = mass
        self.position = position
        self.velocity = velocity
        self.acceleration = np.zeros_like(position)

# Define the OctreeNode class
class OctreeNode:
    '''
    Represents a node in the octree structure used for the Barnes-Hut algorithm.

    Attributes:
    - center (numpy array): The geometric center of the node in 3D space.
    - size (float): The side length of the cubic node.
    - bodies (list): List of Body objects contained within the node.
    - children (list): List of 8 child nodes, corresponding to octants of the cube. Initialized to None.
    - center_of_mass (numpy array): The combined center of mass of all bodies in the node.
    - total_mass (float): The total mass of all bodies in the node.

    Parameters:
    - center (numpy array): The geometric center of the node in 3D space.
    - size (float): The side length of the cubic node.

    '''
    def __init__(self, center, size):
        self.center = center  
        self.size = size  
        self.bodies = []  
        self.children = [None] * 8  
        self.center_of_mass = np.zeros(3)
        self.total_mass = 0.0

    def is_leaf(self):
        '''
        Check if the node is a leaf node (i.e., it has no child nodes).

        Returns:
        - bool: True if the node has no child nodes, otherwise False.
        '''
        return all(child is None for child in self.children)

    def update_center_of_mass(self):
        '''
        Calculate and update the center of mass and total mass for the node based on the bodies it contains.

        If the node contains bodies, the center of mass is the mass-weighted average of the positions of the
        bodies, and the total mass is the sum of their masses. If the node is empty, these values are reset
        to zero.
        '''
        if self.bodies:
            total_mass = sum(body.mass for body in self.bodies)
            center_of_mass = sum(body.mass * body.position for body in self.bodies) / total_mass
            self.center_of_mass = center_of_mass
            self.total_mass = total_mass
        else:
            self.center_of_mass = np.zeros(3)
            self.total_mass = 0.0

# Function to insert a body into the octree
def insert_body(node, body, max_bodies_per_node=1):
    '''
    Insert a body into the octree, redistributing bodies if necessary.

    Parameters:
    - node (OctreeNode): The current node in the octree.
    - body (Body): The body to insert.
    - max_bodies_per_node (int): Maximum number of bodies allowed in a leaf node before subdivision.

    '''
    if node.is_leaf():
        if len(node.bodies) < max_bodies_per_node:
            node.bodies.append(body)
            node.update_center_of_mass()
        else:
            # Subdivide the node and redistribute bodies
            subdivide_node(node)
            insert_body(node, body)
    else:
        # Determine which child node the body belongs to and insert it
        index = get_child_index(node, body)
        insert_body(node.children[index], body)
    node.update_center_of_mass()

# Function to subdivide a node and redistribute bodies
def subdivide_node(node):
    '''
    Subdivide a node into 8 child nodes and redistribute its bodies among the children.

    Parameters:
    - node (OctreeNode): The node to subdivide.
    '''
    half_size = node.size / 2
    offsets = [(-1, -1, -1), (-1, -1, 1), (-1, 1, -1), (-1, 1, 1),
               (1, -1, -1), (1, -1, 1), (1, 1, -1), (1, 1, 1)]
    
    # Create child nodes
    for i, offset in enumerate(offsets):
        center = node.center + half_size * np.array(offset)
        node.children[i] = OctreeNode(center, half_size)
    
    # Redistribute bodies into the appropriate child nodes
    for body in node.bodies:
        index = get_child_index(node, body)
        insert_body(node.children[index], body)
    
    # Clear the bodies list in the current node as they are now in child nodes
    node.bodies = []

# Function to determine the index of the child node where the body should be inserted
def get_child_index(node, body):
    '''
    Determine the index of the child node where a body should be placed.

    Parameters:
    - node (OctreeNode): The current node.
    - body (Body): The body to locate.

    Returns:
    - int: Index of the child node (0 to 7).
    '''
    index = 0
    if body.position[0] > node.center[0]:
        index |= 4
    if body.position[1] > node.center[1]:
        index |= 2
    if body.position[2] > node.center[2]:
        index |= 1
    return index

# Function to calculate forces using the octree
def calculate_forces(node, body, theta):
    '''
     Calculate the gravitational forces acting on a body using the Barnes-Hut approximation.

    Parameters:
    - node (OctreeNode): The current node in the octree.
    - body (Body): The body for which forces are being calculated.
    - theta (float): Threshold parameter for the Barnes-Hut approximation (default: 0.5).
    '''
    if node.is_leaf():
        for other_body in node.bodies:
            if other_body is not body:
                apply_gravitational_force(body, other_body)
    else:
        distance = np.linalg.norm(node.center_of_mass - body.position)
        if node.size / distance < theta: # If s/d < theta
            # Treat this node as a single body
            apply_gravitational_force(body, node)
        else:
            # Recursively calculate forces from child nodes
            for child in node.children:
                if child is not None:
                    calculate_forces(child, body, theta)

def apply_gravitational_force(body, other):
    '''
    Apply gravitational force to a body from another body or octree node.

    Parameters:
    - body (Body): The body experiencing the force.
    - other (Body or OctreeNode): The source of the gravitational force.
    '''
    G = 6.67430e-11  # Gravitational constant

    if isinstance(other, OctreeNode):
        r = other.center_of_mass - body.position
        mass = other.total_mass
    else:
        r = other.position - body.position
        mass = other.mass
    distance = np.linalg.norm(r)
    force = G * body.mass * mass / distance**2
    body.acceleration += force / body.mass * r / distance

def equations_of_motion(t, y, masses, theta):
    '''
    Computes the equations of motion for integrater

    Parameters:
    - t (float): Current time of the simulation.
    - y (numpy array): Flattened array containing positions and velocities of all bodies.
    - masses (numpy array): Array of masses for all bodies.
    - theta (float): Opening angle parameter for the Barnes-Hut algorithm (default: 0.5).

    Returns:
    -  dydt (numpy array): Flattened array containing velocities and accelerations of all bodies
    '''
    n = len(masses)
    positions = y[:3*n].reshape((n, 3))
    velocities = y[3*n:].reshape((n, 3))

    # Create body objects with masses, positions, and velocities
    bodies = [Body(masses[i], positions[i], velocities[i]) for i in range(n)]
    
    # Create the root of the octree
    root_center = np.mean(positions, axis=0)
    root_size = np.max(np.linalg.norm(positions - root_center, axis=1)) * 2
    root = OctreeNode(root_center, root_size)
    
    # Insert bodies into the octree
    for body in bodies:
        insert_body(root, body)
    
    # Calculate accelerations using the octree
    for body in bodies:
        calculate_forces(root, body, theta)
    
    # Extract accelerations from the body objects
    accelerations = np.array([body.acceleration for body in bodies])
    
    # Concatenate velocities and accelerations into a single array
    dydt = np.concatenate([velocities.flatten(), accelerations.flatten()])
    return dydt

# Function to initialize bodies
def initialize_bodies(n, R0, m):
    '''
    Initialize the masses, positions, and velocities of n bodies
    
    Parameters:
    - n (int): Number of bodies.
    - R0 (float): Initial radius of the cluster.
    - m (float): Mass of each body.
    Returns:
     - masses (numpy array): Array of masses.
     - positions (numpy array): Array of positions for all bodies.
     - velocities (numpy array): Array of velocities for all bodies.
    '''

    masses = np.full(n, m)
    positions = np.random.randn(n, 3)
    positions /= np.linalg.norm(positions, axis=1)[:, np.newaxis]
    positions *= R0 * np.random.rand(n)[:, np.newaxis] ** (1/3)

    G = 6.67430e-11

    velocities = np.random.randn(n, 3)  # Random 3D velocities
    velocities *= np.sqrt(G * m / R0)  # Scale velocities to match orbital velocity

    KE = 0.5 * np.sum(m * np.linalg.norm(velocities, axis=1)**2)
    #print(f"Initial total KE {KE}")

    return masses, positions, velocities


@click.command()
@click.option('--n', default= 50, help ='An integer value for the number of bodies in the simulation. Default is 20 bodies')
@click.option('--R0', default= 3.0856776e10 )
@click.option('--timespan', default= 1e6, help = 'A integer value (in seconds) to run the simulation for. Default is 1e6 seconds')
@click.option('--theta', default= 0.5, help = 'Opening angle parameter for the Barnes-Hut algorithm. Default: 0.5')
@click.option('--bound-condition', default= 10, help = 'Limit at which stars are no longer a part of the cluster. Default: 10')



def main(n, r0, timespan, theta, bound_condition):
    '''
    Main function for running the n-body simulation
     Parameters:
     - n (int): Number of bodies in the simulation (default: 20).
     - r0 (float): Initial radius of the cluster (default: 3.0856776e10).
     - timespan (float): Duration of the simulation in seconds (default: 1e6).
     - theta (float): Opening angle parameter for the Barnes-Hut algorithm (default: 0.5).
    '''

    m = 1.9891e30  # Mass of the bodies (kg)
    

    masses, positions, velocities = initialize_bodies(n, r0, m)

    # Initial state vector
    y0 = np.concatenate([positions.flatten(), velocities.flatten()])


    # Adjusting timesteps with number of bodies for better resolution
    if n <= 40:
        time_step = 1
    elif n > 40 and n <=100:
        time_step = 0.1
    elif n >100 and n <200:
        time_step = 0.001
    else:
        time_step = 0.0001


    # Time span for the integration
    t_span = (0, timespan)  # Integrate from t=0 to timespan seconds
    t_eval = np.linspace(*t_span, 3000, time_step)

    
    solution = solve_ivp(equations_of_motion, t_span, y0, t_eval=t_eval, args=(masses, theta), method='RK45')


    print_results(n, solution, m, bound_condition)

def print_results(n, solution, m, cluster_size):
    '''
    Print the results of the N-body simulation, including the 3d graph, Energies, 
    and radial density.
    
    Parameters:
    - n (int): Number of bodies in the simulation.
    - solution (np.array): Solution array containing the positions and velocities of all bodies at the final time step.
    - m: The mass of the objects
    - cluster_size (int): The size (radius) of the cluster
    '''
    # Extract the results and plot trajectories in 3D
    fig1 = plt.figure()
    ax1 = fig1.add_subplot(111, projection='3d')

    for i in range(n):
        x = solution.y[3*i]
        y = solution.y[3*i+1]
        z = solution.y[3*i+2]
        ax1.plot(x, y, z)

    ax1.set_xlabel('Distance (m)')
    ax1.set_ylabel('Distance (m)')
    ax1.set_zlabel('Distance (m)')
    ax1.set_title(f'Trajectories of {n} Bodies')

    # Calculate radial density profiles
    positions = solution.y[:3*n].reshape((n, 3, -1))
    final_positions = positions[:, :, -1]

    radii = np.linalg.norm(final_positions, axis=1)
    max_radius = np.max(radii)
    num_shells = 20
    shell_edges = np.linspace(0, max_radius, num_shells + 1)
    shell_volumes = (4/3) * np.pi * (shell_edges[1:]**3 - shell_edges[:-1]**3)

    shell_masses = np.zeros(num_shells)

    for i, (r_min, r_max) in enumerate(zip(shell_edges[:-1], shell_edges[1:])):
        in_shell = (radii >= r_min) & (radii < r_max)
        shell_masses[i] = np.sum(in_shell) * m

    densities = shell_masses[1:] / shell_volumes[1:]  # Exclude the smallest shell

    # Plot radial density profile
    fig2 = plt.figure()
    ax2 = fig2.add_subplot(111)
    shell_centers = (shell_edges[1:-1] + shell_edges[2:]) / 2  # Exclude the smallest shell
    ax2.plot(shell_centers, densities, marker='o')
    ax2.set_xlabel('Radius (m)')
    ax2.set_ylabel('Density (Star/m^3)')
    ax2.set_title('Radial Density Profile')

    # Calculate KE and U
    R = cluster_size * 3.0856776e10
    G = 6.67430e-11

    KE = compute_KE(solution, n, m, R)
    U = compute_U(solution, n, m, G, R)

    num_stars_within_R = calculate_num_stars_within_R(solution, n, R, m)

    # Plot KE, U, and # of stars in cluster
    fig, axs = plt.subplots(nrows=3, figsize=(8, 12))  # Create three subplots vertically
    # Plot KE on the first subplot
    axs[0].plot(solution.t, KE, label='Kinetic Energy (KE)', color='blue')
    axs[0].set_xlabel('Time (s)', labelpad=-10)  
    axs[0].set_ylabel('Kinetic Energy (J)')
    axs[0].set_title(f'Total Kinetic Energy Within Cluster Over Time')
    axs[0].legend()

    # Plot U on the second subplot
    axs[1].plot(solution.t, U, label='Potential Energy (U)', color='red')
    axs[1].set_xlabel('Time (s)', labelpad=-10)  
    axs[1].set_ylabel('Potential Energy (J)')
    axs[1].set_title('Total Potential Energy Within Cluster Over Time')
    axs[1].legend()

    
    # Plot # of stars in cluster
    axs[2].plot(solution.t, num_stars_within_R, label='# of stars within cluster', color='green')
    axs[2].set_xlabel('Time (s)', labelpad=-10)
    axs[2].set_ylabel('Number of Stars')
    axs[2].set_title('Number of Stars Within Cluster')
    axs[2].legend()
    

    # Adjust layout for better spacing
    plt.tight_layout()

    # Show the plots
    plt.show()


def compute_KE(solution, n, m, R):
    '''
    Compute the total kinetic energy (KE) of the system within some radius.
    
    Parameters:
    - solution (np.array): An array containing the positions and velocities of all bodies in the system.
      It is assumed that the first 3 columns correspond to the positions (x, y, z), and the next 3 columns
      correspond to the velocities (vx, vy, vz).
    - n (int): The number of bodies in the simulation.
    - m (int): The mass of the objects
    - R (float): The radius from the COM to consider stars to.
    
    Returns:
    - KE (float): The total kinetic energy of the system in Joules.
    '''
    # Calculate the center of mass at the first time step
    com = get_centre_mass(solution, m)

    # Initialize kinetic energy array
    KE = np.zeros(len(solution.t))  # Array to store KE for each time step

    # Loop over each time step
    for t_idx in range(len(solution.t)):
        KE_t = 0.0  # Initialize total kinetic energy for this time step

        # Loop over all bodies to calculate the kinetic energy for those within radius R from COM
        for i in range(n):
            xi = solution.y[3 * i, t_idx]     # x position of body i at time t_idx
            yi = solution.y[3 * i + 1, t_idx] # y position of body i at time t_idx
            zi = solution.y[3 * i + 2, t_idx] # z position of body i at time t_idx

            # Calculate the distance from body i to the center of mass (COM)
            dist = np.sqrt((xi - com[0])**2 + (yi - com[1])**2 + (zi - com[2])**2)

            # If the body is within radius R from the COM, calculate its kinetic energy
            if dist < R:
                vi = solution.y[3 * n + 3 * i, t_idx]     # x velocity of body i
                vi_y = solution.y[3 * n + 3 * i + 1, t_idx] # y velocity of body i
                vi_z = solution.y[3 * n + 3 * i + 2, t_idx] # z velocity of body i

                v2 = vi**2 + vi_y**2 + vi_z**2  # Velocity squared

                KE_t += 0.5 * m * v2  # Add to total kinetic energy

        KE[t_idx] = KE_t  # Store the total kinetic energy for this time step

    return KE  # Return the KE array, which has the same length as solution.t

def compute_U(solution, n, m, G, R, epsilon=1e2):
    '''
     Compute the total Gravitational Potential Energy (U) of the system within some radius.
    
    Parameters:
    - solution (np.array): An array containing the positions and velocities of all bodies in the system.
      It is assumed that the first 3 columns correspond to the positions (x, y, z), and the next 3 columns
      correspond to the velocities (vx, vy, vz).
    - n (int): The number of bodies in the simulation.
    - m (int): The mass of the objects
    - G (const): Gravitational constant
    - R (float): The radius from the COM to consider stars to.
    - epsilon (int): Softening radius (min sitance that two bodies can get within each other)
    
    Returns:
    - U (float): The total kinetic energy of the system in Joules.
    
    '''
    # Calculate the center of mass once at the first time step
    com = get_centre_mass(solution, m)

    # Initialize potential energy array
    U = np.zeros(len(solution.t))

    # Loop over each time step
    for t_idx in range(len(solution.t)):
        # List of bodies within radius R at time step t_idx
        bodies_within_R = []

        # Loop over all bodies to check if they are within radius R from the COM
        for i in range(n):
            xi = solution.y[3*i, t_idx]   # x position of body i at time t_idx
            yi = solution.y[3*i+1, t_idx] # y position of body i at time t_idx
            zi = solution.y[3*i+2, t_idx] # z position of body i at time t_idx

            # Calculate the distance from body i to the center of mass (COM)
            dist = np.sqrt((xi - com[0])**2 + (yi - com[1])**2 + (zi - com[2])**2)

            # If within radius R, add the body to the list
            if dist < R:
                bodies_within_R.append(i)
              


        # Now calculate the potential energy between all pairs of bodies within radius R
        for i in range(len(bodies_within_R)):
            for j in range(i + 1, len(bodies_within_R)):
                body_i = bodies_within_R[i]
                body_j = bodies_within_R[j]

                # Get positions of body i and body j at time step t_idx
                xi = solution.y[3*body_i, t_idx]
                yi = solution.y[3*body_i+1, t_idx]
                zi = solution.y[3*body_i+2, t_idx]

                xj = solution.y[3*body_j, t_idx]
                yj = solution.y[3*body_j+1, t_idx]
                zj = solution.y[3*body_j+2, t_idx]

                # Calculate the softened distance between body i and body j
                dist_ij = np.sqrt((xi - xj)**2 + (yi - yj)**2 + (zi - zj)**2) + epsilon

                

                # Add potential energy for the pair (i, j)
                U[t_idx] -= G * m * m / dist_ij  # Add potential energy for the pair

    return U  # Return the total potential energy



def calculate_num_stars_within_R(solution, n, R, m):
    ''' 
    Compute the number of stars within some radius.
    
    Parameters:
    - solution (np.array): An array containing the positions and velocities of all bodies in the system.
      It is assumed that the first 3 columns correspond to the positions (x, y, z), and the next 3 columns
      correspond to the velocities (vx, vy, vz).
    - n (int): The number of bodies in the simulation.
    - m (int): The mass of the objects
    - R (float): The radius from the COM to consider stars to.
    
    Returns:
    - num_stars_within_R (int)
    '''
    
    # Calculate the center of mass at the first time step
    com = get_centre_mass(solution, m)

    # Initialize array to store the number of stars within radius R for each time step
    num_stars_within_R = np.zeros(len(solution.t))

    # Loop over each time step
    for t_idx in range(len(solution.t)):
        count = 0  # Initialize count of stars within radius R for this time step

        # Loop over all bodies to check if they are within radius R from the COM
        for i in range(n):
            xi = solution.y[3*i, t_idx]   # x position of body i at time t_idx
            yi = solution.y[3*i+1, t_idx] # y position of body i at time t_idx
            zi = solution.y[3*i+2, t_idx] # z position of body i at time t_idx

            # Calculate the distance from body i to the center of mass (COM)
            dist = np.sqrt((xi - com[0])**2 + (yi - com[1])**2 + (zi - com[2])**2)

            # If within radius R, increment the count
            if dist < R:
                count += 1

        num_stars_within_R[t_idx] = count  # Store the count for this time step

    return num_stars_within_R  # Return the array of counts

def get_centre_mass(solution, m):
    ''' 
    Compute the Centre of mass of all the stars at the first step
    
    Parameters:
    - solution (np.array): An array containing the positions and velocities of all bodies in the system.
      It is assumed that the first 3 columns correspond to the positions (x, y, z), and the next 3 columns
      correspond to the velocities (vx, vy, vz).
    - m (int): The mass of the objects
    
    Returns:
    - com (np.array): A 1D array containing the x, y, and z coordinates of the center of mass at t=0.
    '''
    x_com = np.sum(m * solution.y[0::3, 0]) / np.sum(m)  # x-component of COM
    y_com = np.sum(m * solution.y[1::3, 0]) / np.sum(m)  # y-component of COM
    z_com = np.sum(m * solution.y[2::3, 0]) / np.sum(m)  # z-component of COM
    com = np.array([x_com, y_com, z_com])  # Center of mass at t=0
    return com


if __name__ == '__main__':
     main()
